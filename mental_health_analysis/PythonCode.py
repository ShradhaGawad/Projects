# -*- coding: utf-8 -*-
"""ProjectCode.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YeXyVk_Zq4OXN4x9EWFXRViwea40-cPy
"""

# One Time Run only
import glob
import pandas as pd

# Merge the files for Spring2019

file_path = "/drive/My Drive/Fall24/IS733/IS733 - Project/Final Deliverables/UT1000_ema/UT1000_spring2019/*/ema_processed/daily_emas.csv"  # Updated file path pattern

all_files = glob.glob(file_path)

df = pd.concat((pd.read_csv(f) for f in all_files), ignore_index=True)

df.to_csv("/drive/My Drive/Fall24/IS733/IS733 - Project/Final Deliverables/Merged_Spring2019.csv", index=False)

# One Time Run only

file_path = "/drive/My Drive/Fall24/IS733/IS733 - Project/Final Deliverables/UT1000_ema/UT1000_spring2019/*/ema_processed/momentary_emas.csv"  # Updated file path pattern

all_files = glob.glob(file_path)

df = pd.concat((pd.read_csv(f) for f in all_files), ignore_index=True)

df.to_csv("/drive/My Drive/Fall24/IS733/IS733 - Project/Final Deliverables/MergedMoments_Spring2019.csv", index=False)

"""# **Data Summary**"""

#Connect to Google drive
from google.colab import drive
drive.mount('/drive')

#Import the necessary Libraries

import pandas as pd
import numpy as np
import seaborn as sns
from datetime import datetime
import matplotlib.pyplot as plt
from sklearn.feature_selection import chi2
from sklearn.metrics import silhouette_score
from sklearn.cluster import KMeans

df = pd.read_csv("/drive/My Drive/Fall24/IS733/IS733 - Project/Final Deliverables/Merged_Spring2019.csv")

df = df.drop(['Unnamed: 0'],axis=1)

df.shape

df.dtypes

df['survey.date'] = pd.to_datetime(df['survey.date'])
df['local.time'] = pd.to_datetime(df['local.time'])

df.dtypes

df.info()

df.columns

for column in df.columns:
    unique_values = df[column].nunique()
    print(f"Column '{column}': {unique_values}")

def column_type(col):
    try:
        tempcol = pd.to_datetime(col, errors='ignore')
    except:
      pass


    if col.nunique() < 15:
      if pd.api.types.is_numeric_dtype(col):
            return 'Numeric'
      else:
            return 'Symbolic'
    elif col.name in ['Latitude', 'Longitude', 'Location']:
            return 'Spatial'
    elif pd.api.types.is_datetime64_any_dtype(tempcol):
        return 'Temporal'
    elif pd.api.types.is_numeric_dtype(col):
        return 'Numeric'
    else:
        return 'Other'
df_types = df.apply(column_type)
df_types

df_types.value_counts()

df.describe()

df.isna().sum()

pidf = df.pivot(index=['pid', 'survey.date', 'local.time'], columns='variable', values='answer').reset_index()
pidf.head(10)

pidf.isna().sum()

a = pidf.isna().sum().plot(kind='bar',rot='vertical', title='Missing Values', ylabel='Count of Total Incidents', xlabel='Features', figsize=(12, 8))
a.bar_label(a.containers[0])

cdf = pidf.groupby(['pid', 'survey.date'])[['content', 'energy', 'lonely','refreshed', 'restful', 'sad','sleep','stress']].max().reset_index() # merge duplicates by finding maximum value for that group
cdf.head()

cdf.isna().sum()

cdf.ffill(inplace=True)

cdf.isna().sum()

duplicates = cdf[cdf.duplicated(subset=['pid', 'survey.date'], keep=False)]
print(duplicates)

cdf.shape

cdf['month'] = cdf['survey.date'].dt.month
cdf['day_of_month'] = cdf['survey.date'].dt.day
cdf['week_number'] = (cdf['day_of_month'] - 1) // 7 + 1
cdf['month_name'] = cdf['survey.date'].dt.month_name().str[:3]

weekly_pid_counts = cdf.groupby(['month', 'week_number', 'month_name'])['pid'].nunique().reset_index()
weekly_pid_counts['week_label'] = 'Week ' + weekly_pid_counts['week_number'].astype(str) + ' - ' + weekly_pid_counts['month_name']
weekly_pid_counts = weekly_pid_counts.sort_values(by=['month', 'week_number'])


plt.figure(figsize=(12, 6))
ax = sns.barplot(x='week_label', y='pid', data=weekly_pid_counts)

ax.grid(False)

for p in ax.patches:
    ax.annotate(f'{int(p.get_height())}',
                (p.get_x() + p.get_width() / 2., p.get_height()),
                ha='center', va='center',
                xytext=(0, 5),
                textcoords='offset points')

plt.title('Student Responses per Week')
plt.xlabel('Week')
plt.ylabel('Responses')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()

weekly_pid_counts.head()

date_string = "2019-02-07"
min_survey_date = datetime.strptime(date_string, "%Y-%m-%d").date()

date_string = "2019-03-07"
max_survey_date = datetime.strptime(date_string, "%Y-%m-%d").date()
print(f"The survey dates range from {min_survey_date} to {max_survey_date}")

cdf = cdf[(cdf['survey.date'].dt.date >= min_survey_date) & (cdf['survey.date'].dt.date <= max_survey_date)]

"""# Response Rate"""

unique_months = cdf['survey.date'].dt.month.unique()
print(f"The unique months in the survey are: {unique_months}")

total_survey_dates = (max_survey_date - min_survey_date).days + 1
total_survey_dates



pid_counts = cdf.groupby('pid')['sad'].count().reset_index(name='response')
pid_counts['response_rate'] = (pid_counts['response'] / total_survey_dates) * 100
pid_counts.sort_values(by='response_rate', ascending=False, inplace=True)
pid_counts.head()



pid_counts.reset_index(inplace=True)
pid_counts.drop('index', axis=1, inplace=True)
pid_counts.head()

top_students = pid_counts[pid_counts['response']==22]['pid']
top_students

total_students = pid_counts['pid'].nunique()
total = total_students*total_survey_dates

total_responses = pid_counts['response'].sum()

response_rate = total_responses / total
print(f"Response Rate: {response_rate:.2f}")

pid_counts.shape

rr = pid_counts.groupby('response').count().reset_index()

rr.head()

plt.figure(figsize=(10, 6))
sns.barplot(x='response', y='pid', data=rr)
plt.title('Response Versus Students')
plt.xlabel('Number of Responses')
plt.ylabel('Mumber of Students')
plt.xticks(rotation=45, ha='right')
ax = plt.gca()
for p in ax.patches:
    ax.annotate(f'{int(p.get_height())}',
                (p.get_x() + p.get_width() / 2., p.get_height()),
                ha='center', va='center',
                xytext=(0, 5),
                textcoords='offset points')

plt.show()

plt.figure(figsize=(10, 6))
sns.barplot(x='pid', y='response_rate', data=pid_counts.head(5))
plt.title('Response Rate for Top 5 PIDs')
plt.xlabel('PID')
plt.ylabel('Response Rate (%)')
plt.xticks(rotation=45, ha='right')
plt.show()

"""# **Modelling**

## Clustering
"""

top_students.head()

top_students.nunique()

TopResponses = cdf[cdf['pid'].isin(top_students)]

gdf = TopResponses.groupby('pid')[['sad','stress','content','lonely']].mean().reset_index()

features_for_clustering = ['sad','stress','content','lonely']

X = gdf[features_for_clustering]

inertia = []
for k in range(1, 11):
    kmeans = KMeans(n_clusters=k, random_state=42)
    kmeans.fit(X)
    inertia.append(kmeans.inertia_)

plt.plot(range(1, 11), inertia, marker='o')
plt.title('Elbow Method for Optimal k')
plt.xlabel('Number of Clusters (k)')
plt.ylabel('Inertia')
plt.show()

optimal_k = 3
kmeans = KMeans(n_clusters=optimal_k, random_state=42)
gdf['cluster'] = kmeans.fit_predict(X)

cluster_means = gdf.groupby('cluster')[features_for_clustering].mean()
print(cluster_means)

cluster_counts = gdf.groupby('cluster')['pid'].nunique().reset_index()
print(cluster_counts)

silhouette_avg = silhouette_score(X, gdf['cluster'])
print(f"Silhouette Score: {silhouette_avg}")

gdf.head()

cluster_stats = gdf.groupby('cluster').agg(
    pid_count=('pid', 'nunique'),
    avg_sad=('sad', 'mean'),
    avg_content=('content', 'mean'),
    avg_lonely=('lonely', 'mean'),
    avg_stress=('stress', 'mean')
    )

fig, ax1 = plt.subplots(figsize=(10, 6))

ax = sns.barplot(
    x=cluster_stats.index,
    y=cluster_stats['pid_count'],
    hue=cluster_stats.index,
    palette='viridis',
    dodge=False,
    legend=False,
    ax=ax1
)
ax1.set_xlabel('Cluster')
ax1.set_ylabel('Number of Students', color='blue')

ax2 = ax1.twinx()

ax2.plot(
    cluster_stats.index,
    cluster_stats['avg_sad'],
    marker='o', color='red',
    label='Average Sad'
)

ax2.plot(
    cluster_stats.index,
    cluster_stats['avg_content'],
    marker='o', color='green',
    label='Average Content'
)

ax2.plot(
    cluster_stats.index,
    cluster_stats['avg_lonely'],
    marker='o', color='orange',
    label='Average Loneliness'
)

ax2.plot(
    cluster_stats.index,
    cluster_stats['avg_stress'],
    marker='o', color='purple',
    label='Average Stress'
)

ax2.set_ylabel('Average Values', color='black')
ax2.legend(bbox_to_anchor=(1.05, 1),loc='upper right')


plt.title('Number of Students and Average Emotions by Cluster')
plt.legend(bbox_to_anchor=(1.30, 1),loc='upper right')


for p in ax.patches:

    ax.annotate(f'{int(p.get_height())}',
                (p.get_x() + p.get_width() / 2., p.get_height()),
                ha='center', va='center',
                xytext=(0, 5),
                textcoords='offset points')

plt.show()

gdf.head()

plot_data = gdf[['pid', 'cluster', 'sad', 'stress', 'content', 'lonely']].copy()

fig, axes = plt.subplots(2, 2, figsize=(10, 8))

variables = ['sad', 'stress', 'content', 'lonely']

for i, variable in enumerate(variables):
    row = i // 2
    col = i % 2
    ax = axes[row, col]
    sns.scatterplot(x='pid', y=variable, hue='cluster', data=plot_data, palette='viridis', s=50, ax=ax)

    ax.set_title(f'{variable.capitalize()} Levels by Cluster')
    ax.set_xlabel('Student PID')
    ax.set_ylabel(f'{variable.capitalize()} Level')
    ax.set_xticks([])

plt.tight_layout()
plt.show()

"""# Trends -  Highly Stress Students"""

gdf.head(1), cdf.head(1)

hss_pids = gdf[gdf['cluster']==1]['pid']
hss_pids
hss = cdf[cdf['pid'].isin(hss_pids)].reset_index().sort_values(by=['survey.date'])

a = hss.groupby('survey.date')[['stress','sad','lonely','content']].mean().reset_index()
a.tail()

plt.figure(figsize=(12, 6))

plt.plot(a['survey.date'], a['stress'], label='Stress')
plt.plot(a['survey.date'], a['content'], label='content')
plt.plot(a['survey.date'], a['lonely'], label='Lonely')
plt.plot(a['survey.date'], a['sad'], label='sad')

plt.xlabel('Survey Date')
plt.ylabel('Level')
plt.title('Average Variables Over Time')
plt.legend()
plt.grid(True)
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()



"""#Exploring one highly stressed student"""

# get the pid for a student who is highly stressed with high response rate

hp = hss_pids.to_frame()
hp.reset_index(inplace=True,drop=True)
hp.head()

spid = hp['pid'][0]
spid

Student1 = cdf[cdf['pid']==spid].reset_index()



Student1.head()

Student1['month'] = Student1['survey.date'].dt.month
Student1['day_of_month'] = Student1['survey.date'].dt.day
Student1['week_number'] = (Student1['day_of_month'] - 1) // 7 + 1
Student1['month_name'] = Student1['survey.date'].dt.month_name().str[:3]

weekly_response = Student1.groupby(['month', 'week_number', 'month_name'])['stress'].count().reset_index()
weekly_response['week_label'] = 'Week ' + weekly_response['week_number'].astype(str) + ' - ' + weekly_response['month_name']
weekly_response = weekly_response.sort_values(by=['month', 'week_number'])

plt.figure(figsize=(12, 6))
ax = sns.barplot(x='week_label', y='stress', data=weekly_response)

ax.grid(False)

for p in ax.patches:
    ax.annotate(f'{int(p.get_height())}',
                (p.get_x() + p.get_width() / 2., p.get_height()),
                ha='center', va='center',
                xytext=(0, 5),
                textcoords='offset points')

plt.title('Student responses per Week')
plt.xlabel('Week')
plt.ylabel('Responses')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()

"""## **Data Visualization**"""

monthly_sad = Student1.groupby(Student1['survey.date'].dt.to_period('M'))['sad'].mean()
monthly_sad.plot(kind='bar', title='SadnessLevels', ylabel='Avg Sadness',xlabel='Month', figsize=(6, 4),grid=True)



"""## Relationship with Location and Activity"""



df2 = pd.read_csv("/drive/My Drive/Fall24/IS733/IS733 - Project/Final Deliverables/MergedMoments_Spring2019.csv")

df2.shape

df2.head()

df2['local.time'] = pd.to_datetime(df2['local.time'])
df2['date'] = df2['local.time'].dt.date
df2['time'] = df2['local.time'].dt.time

df2.head()



Student1 = cdf[cdf['pid']==spid].reset_index()
Student_ema = df2[df2['pid']==spid].reset_index()

Student1['month'] = Student1['survey.date'].dt.month
Student1['day_of_month'] = Student1['survey.date'].dt.day
Student1['week_number'] = (Student1['day_of_month'] - 1) // 7 + 1
Student1['month_name'] = Student1['survey.date'].dt.month_name().str[:3]

weekly_response = Student1.groupby(['month', 'week_number', 'month_name'])['stress'].count().reset_index()
weekly_response['week_label'] = 'Week ' + weekly_response['week_number'].astype(str) + ' - ' + weekly_response['month_name']
weekly_response = weekly_response.sort_values(by=['month', 'week_number'])

plt.figure(figsize=(12, 6))
ax = sns.barplot(x='week_label', y='stress', data=weekly_response)

ax.grid(False)

for p in ax.patches:
    ax.annotate(f'{int(p.get_height())}',
                (p.get_x() + p.get_width() / 2., p.get_height()),
                ha='center', va='center',
                xytext=(0, 5),
                textcoords='offset points')

plt.title('Student responses per Week')
plt.xlabel('Week')
plt.ylabel('Responses')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()

Student1['week_label'] = 'Week ' + Student1['week_number'].astype(str) + ' - ' + Student1['month_name']

fig, axes = plt.subplots(2, 2, figsize=(12, 8))  # Create a 2x2 grid of subplots

# Plot stress
sns.lineplot(x='survey.date', y='stress', data=Student1, marker='o', ax=axes[0, 0])
axes[0, 0].set_title('Stress Over Time')
axes[0, 0].set_xlabel('Survey Date')
axes[0, 0].set_ylabel('Stress Level')

# Plot sad
sns.lineplot(x='survey.date', y='sad', data=Student1, marker='s', ax=axes[0, 1])
axes[0, 1].set_title('Sadness Over Time')
axes[0, 1].set_xlabel('Survey Date')
axes[0, 1].set_ylabel('Sadness Level')

# Plot content
sns.lineplot(x='survey.date', y='content', data=Student1, marker='x', ax=axes[1, 0])
axes[1, 0].set_title('Content Over Time')
axes[1, 0].set_xlabel('Survey Date')
axes[1, 0].set_ylabel('Content Level')

# Plot lonely
sns.lineplot(x='survey.date', y='lonely', data=Student1, marker='^', ax=axes[1, 1])
axes[1, 1].set_title('Loneliness Over Time')
axes[1, 1].set_xlabel('Survey Date')
axes[1, 1].set_ylabel('Loneliness Level')

# Adjust layout
for ax in axes.flat:
    ax.tick_params(axis='x', rotation=45)  # Set rotation to 0 degrees

plt.tight_layout()
plt.show()

Student_ema['date'] = pd.to_datetime(Student_ema['date'])

import re
def process(row):
  loc = re.sub(r'[^\w\s]', '', row)
  return loc

Student_ema['where.at'] = Student_ema['where.at'].apply(process)
Student_ema['with.whom'] = Student_ema['with.whom'].apply(process)
Student_ema['doing.what'] = Student_ema['doing.what'].apply(process)

for i, row in Student_ema.iterrows():
  location = row['where.at'].lower()
  activity = row['doing.what'].lower()
  Student_ema.loc[i, 'apartment'] = 1 if 'apartment' in location else 0
  Student_ema.loc[i, 'dorm'] = 1 if 'dorm' in location else 0
  Student_ema.loc[i, 'Home'] = 1 if 'home' in location else 0
  Student_ema.loc[i, 'Campus'] = 1 if 'campus' in location else 0
  Student_ema.loc[i, 'Cafe'] = 1 if 'cafe' in location else 0
  Student_ema.loc[i, 'Restaurants'] = 1 if 'restaurant' in location else 0

  Student_ema.loc[i, 'chores'] = 1 if 'chores' in activity else 0
  Student_ema.loc[i, 'resting'] = 1 if 'resting' in activity else 0

  Student_ema.loc[i, 'movies'] = 1 if 'movies' in activity else 0
  Student_ema.loc[i, 'classes/meetings'] = 1 if 'meetings' in activity else 0
  Student_ema.loc[i, 'studying/exam'] = 1 if 'exam' in activity else 0
  Student_ema.loc[i, 'eating'] = 1 if 'eating' in activity else 0

  Student_ema.loc[i, 'socializing'] = 1 if 'socializing' in activity else 0
  Student_ema.loc[i, 'browsing'] = 1 if 'browsing' in activity else 0
  Student_ema.loc[i, 'working'] = 1 if 'working' in activity else 0
  Student_ema.loc[i, 'exercise'] = 1 if 'exercising' in activity else 0
  Student_ema.loc[i, 'traveling'] = 1 if 'traveling' in activity else 0

  Student_ema.loc[i, 'nothing'] = 1 if 'nothing' in activity else 0

Student_ema.columns

loc_cols = ['Home',
 'dorm',
 'apartment',
 'Campus',
 'Cafe',
 'Restaurants']

activity_cols = [
 'chores', 'resting', 'movies',
       'classes/meetings', 'studying/exam', 'eating', 'socializing',
       'browsing', 'working', 'exercise', 'traveling', 'nothing']

X= Student_ema[loc_cols]
y = Student_ema['stress']
y_sad = Student_ema['sad']
y_lonely = Student_ema['lonely']
y_content = Student_ema['content']

chi_scores, p_values = chi2(X, y)
chi_scores_sad, p_values_sad = chi2(X, y_sad)
chi_scores_lonely, p_values_lonely = chi2(X, y_lonely)
chi_scores_content, p_values_content = chi2(X, y_content)

data = pd.DataFrame({
    'Feature': loc_cols,
    'Stress': chi_scores,
    'Sad': chi_scores_sad,
    'Lonely': chi_scores_lonely,
    'Content': chi_scores_content
})

melted_data = pd.melt(data, id_vars=['Feature'], value_vars=['Stress', 'Sad', 'Lonely', 'Content'],
                     var_name='Emotion', value_name='Chi-Squared Score')

plt.figure(figsize=(10, 6))
sns.barplot(x='Feature', y='Chi-Squared Score', hue='Emotion', data=melted_data, palette='viridis')
plt.title('Chi-Squared Scores for Different Emotions')
plt.xlabel('Locations')
plt.ylabel('Chi-Squared Score')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()







X= Student_ema[activity_cols]
y = Student_ema['stress']
y_sad = Student_ema['sad']
y_lonely = Student_ema['lonely']
y_content = Student_ema['content']

chi_scores, p_values = chi2(X, y)
chi_scores_sad, p_values_sad = chi2(X, y_sad)
chi_scores_lonely, p_values_lonely = chi2(X, y_lonely)
chi_scores_content, p_values_content = chi2(X, y_content)

data = pd.DataFrame({
    'Feature': activity_cols,
    'Stress': chi_scores,
    'Sad': chi_scores_sad,
    'Lonely': chi_scores_lonely,
    'Content': chi_scores_content
})

melted_data = pd.melt(data, id_vars=['Feature'], value_vars=['Stress', 'Sad', 'Lonely', 'Content'],
                     var_name='Emotion', value_name='Chi-Squared Score')

plt.figure(figsize=(10, 6))
sns.barplot(x='Feature', y='Chi-Squared Score', hue='Emotion', data=melted_data, palette='Set1')
plt.title('Chi-Squared Scores for Different Emotions')
plt.xlabel('Activities')
plt.ylabel('Chi-Squared Score')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()